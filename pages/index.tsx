import { ConnectButton, useConnectModal } from "@rainbow-me/rainbowkit";
import type { NextPage } from "next";
import Head from "next/head";
import React from "react";
import { useSigner } from "wagmi";
import useDropKit from "../hooks/useDropKit";
import styles from "../styles/Home.module.css";

const Home: NextPage = () => {
  const dropKit = useDropKit();

  const { data: signer } = useSigner();
  const { openConnectModal } = useConnectModal();
  const [isLoading, setIsLoading] = React.useState(false);
  const [totalSupply, setTotalSupply] = React.useState<number | undefined>();
  const [max, setMax] = React.useState<number | undefined>();

  React.useEffect(() => {
    if (!dropKit) {
      return;
    }
    const fetchValues = async () => {
      const [totalSupply, max] = await Promise.all([
        dropKit.totalSupply(),
        dropKit.maxAmount(),
      ]);
      setTotalSupply(totalSupply);
      setMax(max);
    };
    fetchValues();
  }, [dropKit]);

  const handleMint = React.useCallback(async () => {
    if (!signer && openConnectModal) {
      openConnectModal();
      return;
    }
    if (!dropKit) {
      return;
    }
    try {
      setIsLoading(true);
      await dropKit.mint(1);
    } catch (error) {
      console.error(error);
    } finally {
      setIsLoading(false);
    }
  }, [dropKit, openConnectModal, signer]);

  return (
    <div className={styles.container}>
      <Head>
        <title>DropKit Example</title>
        <meta
          name="description"
          content="Generated by @rainbow-me/create-rainbowkit"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />

        {totalSupply !== undefined && max !== undefined && (
          <div className={styles.container}>
            Supply <br />
            {totalSupply} / {max}
          </div>
        )}

        <div className={styles.container}>
          <button
            disabled={isLoading}
            className={styles.button}
            onClick={handleMint}
          >
            {isLoading ? "Loading..." : "Mint"}
          </button>
        </div>
      </main>
    </div>
  );
};

export default Home;
